heat_template_version: 2015-10-15

description: A Group of Load Balanced Servers

parameters:
  app_port:
    type: number
    default: 80
    description: Port used by the servers
  flavor:
    type: string
    default: m1.medium
    description: Flavor used for servers
    constraints:
    - custom_constraint: nova.flavor
  image:
    type: string
    default: centos
    description: Image used for servers
    constraints:
    - custom_constraint: glance.image
  lb_port:
    type: number
    default: 80
    description: Port used by the load balancer
  private_network:
    type: string
    default: new-net
    description: Network used by the servers
    constraints:
    - custom_constraint: neutron.network
  public_network:
    type: string
    default: public-net
    description: Network used by the load balancer
    constraints:
    - custom_constraint: neutron.network
  subnet:
    type: string
    default: new-subnet
    description: Subnet on which the load balancer will be located
    constraints:
    - custom_constraint: neutron.subnet
  key_name:
    type: string
    default: centos-ssh
    description: ssh private key

resources:

  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: { get_param: app_port }
        port_range_max: { get_param: app_port }

  subport1:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      security_groups: [{ get_resource: sec_group }, default]
      fixed_ips:
        - subnet_id: { get_param: subnet }

  subport2:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      security_groups: [{ get_resource: sec_group }, default]
      fixed_ips:
        - subnet_id: { get_param: subnet }

# A ResourceGroup with a nested server template
# is a cleaner way of doing multiple servers.
# These are placed inline for the sake of the
# keeping the example in the App Catalog in a
# single template.
#
# A Resource Group would be as follows:
#
#  group:
#    type: OS::Heat::ResourceGroup
#    properties:
#      count: 2
#      resource_def:
#        type: lb_server.yaml
#
# The lb_server template would create the
# server and member resources.

  server1:
    type: OS::Nova::Server
    properties:
      name: Server1
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name}
      networks: [{ port: { get_resource: subport1 }}]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/bash
            yum install epel-release -y
            yum install httpd -y
            yum install mod_security -y

            yum install mod_auth_openidc -y
            yum install memcached -y

            systemctl enable memcached
            systemctl enable httpd.service

            cat <<EOT >> /etc/httpd/conf/httpd.conf
            LoadModule security2_module modules/mod_security2.so
            EOT

            cat <<EOT >> /etc/httpd/conf.d/auth_openidc.conf
            OIDCCacheType memcache
            OIDCMemCacheServers (ipAddr1:11211)+(ipAddr2:11211)
            EOT

            cat <<EOT >> /var/www/html/index.html
            <html>
            <body>
            <h1>hi</h1>
            </body>
            </html>
            EOT

            systemctl start httpd.service
            systemctl start memcached
          params:
            PORT: { get_param: app_port }
            ipAddr1: {get_attr: [subport1, fixed_ips, 0, ip_address]}
            ipAddr2: {get_attr: [subport2, fixed_ips, 0, ip_address]}

  pool_member1:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server1, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: subnet }

  server2:
    type: OS::Nova::Server
    properties:
      name: Server2
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name}
      networks: [{ network: { get_param: private_network }}]
      security_groups: [{ get_resource: sec_group }, default]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/bash
            yum install epel-release -y
            yum install httpd -y
            yum install mod_security -y

            yum install mod_auth_openidc -y
            yum install memcached -y

            systemctl enable memcached
            systemctl enable httpd.service

            cat <<EOT >> /etc/httpd/conf/httpd.conf
            LoadModule security2_module modules/mod_security2.so
            EOT

            cat <<EOT >> /etc/httpd/conf.d/auth_openidc.conf
            OIDCCacheType memcache
            OIDCMemCacheServers (ipAddr1:11211)+(ipAddr2:11211)
            EOT

            cat <<EOT >> /var/www/html/index.html
            <html>
            <body>
            <h1>hi</h1>
            </body>
            </html>
            EOT

            systemctl start httpd.service
            systemctl start memcached
          params:
            PORT: { get_param: app_port }
            ipAddr1: {get_attr: [subport1, fixed_ips, 0, ip_address]}
            ipAddr2: {get_attr: [subport2, fixed_ips, 0, ip_address]}

  pool_member2:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server2, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: subnet }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      delay: 3
      type: PING
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }

  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: { get_param: lb_port }

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_param: subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

outputs:

  lburl:
    value:
      str_replace:
        template: http://IP_ADDRESS:PORT
        params:
          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
          PORT: { get_param: lb_port }
    description: >
      This URL is the "external" URL that can be used to access the
      load balancer.
